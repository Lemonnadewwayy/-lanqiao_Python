排序问题
主要介绍内置排序函数，冒泡排序，选择排序，插入排序，快速排序，归并排序

1.内置排序函数


2.冒泡排序（Bubble sort）
冒泡排序（Bubble Sort）是一种简单的排序算法，它的基本思想是通过多次比较相邻元素并交换位置，将最大（或最小）的元素逐步 “冒泡” 到数组的末尾。以下是对冒泡排序原理的详细解释：
基本原理
冒泡排序重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。
具体步骤
比较相邻元素：从数组的第一个元素开始，比较相邻的两个元素。如果第一个元素比第二个元素大（或小，取决于排序顺序是升序还是降序），则交换它们的位置。
移动到下一对元素：继续比较数组中的下一对相邻元素，重复步骤 1，直到遍历完整个数组。此时，最大（或最小）的元素将被移动到数组的最后一个位置。
重复上述过程：对除了最后一个元素之外的其余元素重复步骤 1 和步骤 2，直到整个数组有序。
具体步骤
比较相邻元素：从数组的第一个元素开始，比较相邻的两个元素。如果第一个元素比第二个元素大（或小，取决于排序顺序是升序还是降序），则交换它们的位置。
移动到下一对元素：继续比较数组中的下一对相邻元素，重复步骤 1，直到遍历完整个数组。此时，最大（或最小）的元素将被移动到数组的最后一个位置。
重复上述过程：对除了最后一个元素之外的其余元素重复步骤 1 和步骤 2，直到整个数组有序。

示例
假设有一个数组 [5, 3, 8, 4, 2]，我们要对其进行升序排序。以下是冒泡排序的详细过程：
第一轮比较
比较 5 和 3，因为 5 > 3，所以交换它们的位置，数组变为 [3, 5, 8, 4, 2]。
比较 5 和 8，因为 5 < 8，所以不交换位置，数组保持 [3, 5, 8, 4, 2]。
比较 8 和 4，因为 8 > 4，所以交换它们的位置，数组变为 [3, 5, 4, 8, 2]。
比较 8 和 2，因为 8 > 2，所以交换它们的位置，数组变为 [3, 5, 4, 2, 8]。
此时，最大的元素 8 已经 “冒泡” 到了数组的最后一个位置。
第二轮比较
比较 3 和 5，因为 3 < 5，所以不交换位置，数组保持 [3, 5, 4, 2, 8]。
比较 5 和 4，因为 5 > 4，所以交换它们的位置，数组变为 [3, 4, 5, 2, 8]。
比较 5 和 2，因为 5 > 2，所以交换它们的位置，数组变为 [3, 4, 2, 5, 8]。
此时，第二大的元素 5 已经 “冒泡” 到了数组的倒数第二个位置。
第三轮比较
比较 3 和 4，因为 3 < 4，所以不交换位置，数组保持 [3, 4, 2, 5, 8]。
比较 4 和 2，因为 4 > 2，所以交换它们的位置，数组变为 [3, 2, 4, 5, 8]。
此时，第三大的元素 4 已经 “冒泡” 到了数组的倒数第三个位置。
第四轮比较
比较 3 和 2，因为 3 > 2，所以交换它们的位置，数组变为 [2, 3, 4, 5, 8]。
此时，数组已经有序，排序完成。
3.选择排序


4.插入排序

5.快速排序
6.归并排序
